"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadCurrentTemplate = exports.loadCurrentTemplateWithNestedStacks = void 0;
const path = require("path");
const fs = require("fs-extra");
const evaluate_cloudformation_template_1 = require("./evaluate-cloudformation-template");
const cloudformation_1 = require("./util/cloudformation");
/**
 * Reads the currently deployed template from CloudFormation and adds a
 * property, `NestedTemplate`, to any nested stacks that appear in either
 * the deployed template or the newly synthesized template. `NestedTemplate`
 * is populated with contents of the nested template by mutating the
 * `template` property of `rootStackArtifact`. This is done for all
 * nested stack resources to arbitrary depths.
 */
async function loadCurrentTemplateWithNestedStacks(rootStackArtifact, sdk) {
    const deployedTemplate = await loadCurrentTemplate(rootStackArtifact, sdk);
    const nestedStackNames = await addNestedTemplatesToGeneratedAndDeployedStacks(rootStackArtifact, sdk, {
        generatedTemplate: rootStackArtifact.template,
        deployedTemplate: deployedTemplate,
        deployedStackName: rootStackArtifact.stackName,
    });
    return {
        deployedTemplate,
        nestedStackNames,
    };
}
exports.loadCurrentTemplateWithNestedStacks = loadCurrentTemplateWithNestedStacks;
/**
 * Returns the currently deployed template from CloudFormation that corresponds to `stackArtifact`.
 */
async function loadCurrentTemplate(stackArtifact, sdk) {
    return loadCurrentStackTemplate(stackArtifact.stackName, sdk);
}
exports.loadCurrentTemplate = loadCurrentTemplate;
async function loadCurrentStackTemplate(stackName, sdk) {
    const cfn = sdk.cloudFormation();
    const stack = await cloudformation_1.CloudFormationStack.lookup(cfn, stackName);
    return stack.template();
}
async function addNestedTemplatesToGeneratedAndDeployedStacks(rootStackArtifact, sdk, parentTemplates) {
    var _a, _b, _c, _d, _e;
    const listStackResources = parentTemplates.deployedStackName ? new evaluate_cloudformation_template_1.LazyListStackResources(sdk, parentTemplates.deployedStackName) : undefined;
    const nestedStackNames = {};
    for (const [nestedStackLogicalId, generatedNestedStackResource] of Object.entries((_a = parentTemplates.generatedTemplate.Resources) !== null && _a !== void 0 ? _a : {})) {
        if (!isCdkManagedNestedStack(generatedNestedStackResource)) {
            continue;
        }
        const assetPath = generatedNestedStackResource.Metadata['aws:asset:path'];
        const nestedStackTemplates = await getNestedStackTemplates(rootStackArtifact, assetPath, nestedStackLogicalId, listStackResources, sdk);
        generatedNestedStackResource.Properties.NestedTemplate = nestedStackTemplates.generatedTemplate;
        const deployedParentTemplate = parentTemplates.deployedTemplate;
        deployedParentTemplate.Resources = (_b = deployedParentTemplate.Resources) !== null && _b !== void 0 ? _b : {};
        const deployedNestedStackResource = (_c = deployedParentTemplate.Resources[nestedStackLogicalId]) !== null && _c !== void 0 ? _c : {};
        deployedParentTemplate.Resources[nestedStackLogicalId] = deployedNestedStackResource;
        deployedNestedStackResource.Type = (_d = deployedNestedStackResource.Type) !== null && _d !== void 0 ? _d : 'AWS::CloudFormation::Stack';
        deployedNestedStackResource.Properties = (_e = deployedNestedStackResource.Properties) !== null && _e !== void 0 ? _e : {};
        deployedNestedStackResource.Properties.NestedTemplate = nestedStackTemplates.deployedTemplate;
        nestedStackNames[nestedStackLogicalId] = {
            nestedStackPhysicalName: nestedStackTemplates.deployedStackName,
            nestedChildStackNames: await addNestedTemplatesToGeneratedAndDeployedStacks(rootStackArtifact, sdk, nestedStackTemplates),
        };
    }
    return nestedStackNames;
}
async function getNestedStackTemplates(rootStackArtifact, nestedTemplateAssetPath, nestedStackLogicalId, listStackResources, sdk) {
    const nestedTemplatePath = path.join(rootStackArtifact.assembly.directory, nestedTemplateAssetPath);
    // CFN generates the nested stack name in the form `ParentStackName-NestedStackLogicalID-SomeHashWeCan'tCompute,
    // the arn is of the form: arn:aws:cloudformation:region:123456789012:stack/NestedStackName/AnotherHashWeDon'tNeed
    // so we get the ARN and manually extract the name.
    const nestedStackArn = await getNestedStackArn(nestedStackLogicalId, listStackResources);
    const deployedStackName = nestedStackArn === null || nestedStackArn === void 0 ? void 0 : nestedStackArn.slice(nestedStackArn.indexOf('/') + 1, nestedStackArn.lastIndexOf('/'));
    return {
        generatedTemplate: JSON.parse(fs.readFileSync(nestedTemplatePath, 'utf-8')),
        deployedTemplate: deployedStackName
            ? await loadCurrentStackTemplate(deployedStackName, sdk)
            : {},
        deployedStackName,
    };
}
async function getNestedStackArn(nestedStackLogicalId, listStackResources) {
    var _a;
    try {
        const stackResources = await (listStackResources === null || listStackResources === void 0 ? void 0 : listStackResources.listStackResources());
        return (_a = stackResources === null || stackResources === void 0 ? void 0 : stackResources.find(sr => sr.LogicalResourceId === nestedStackLogicalId)) === null || _a === void 0 ? void 0 : _a.PhysicalResourceId;
    }
    catch (e) {
        if (e.message.startsWith('Stack with id ') && e.message.endsWith(' does not exist')) {
            return;
        }
        throw e;
    }
}
function isCdkManagedNestedStack(stackResource) {
    return stackResource.Type === 'AWS::CloudFormation::Stack' && stackResource.Metadata && stackResource.Metadata['aws:asset:path'];
}
//# sourceMappingURL=data:application/json;base64,