"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mockery = require("mockery");
const docs_1 = require("../lib/commands/docs");
const argv = {
    browser: 'echo %u',
    commandHandler: undefined,
};
describe('`cdk docs`', () => {
    beforeEach(done => {
        mockery.registerMock('../../lib/logging', {
            debug() { return; },
            error() { return; },
            print() { return; },
            warning() { return; },
        });
        mockery.enable({ useCleanCache: true, warnOnReplace: true, warnOnUnregistered: false });
        done();
    });
    afterAll(done => {
        mockery.disable();
        mockery.deregisterAll();
        done();
    });
    test('exits with 0 when everything is OK', async () => {
        const result = await docs_1.realHandler({ args: argv });
        expect(result).toBe(0);
    });
    test('exits with 0 when opening the browser fails', async () => {
        mockery.registerMock('child_process', {
            exec(_, cb) {
                cb(new Error('TEST'));
            },
        });
        const result = await docs_1.realHandler({ args: argv });
        expect(result).toBe(0);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWRvY3MudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNkay1kb2NzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBbUM7QUFFbkMsK0NBQW1EO0FBRW5ELE1BQU0sSUFBSSxHQUFHO0lBQ1gsT0FBTyxFQUFFLFNBQVM7SUFDbEIsY0FBYyxFQUFFLFNBQXlDO0NBQzFELENBQUM7QUFFRixRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtJQUMxQixVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDaEIsT0FBTyxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBRTtZQUN4QyxLQUFLLEtBQUssT0FBTyxDQUFDLENBQUM7WUFDbkIsS0FBSyxLQUFLLE9BQU8sQ0FBQyxDQUFDO1lBQ25CLEtBQUssS0FBSyxPQUFPLENBQUMsQ0FBQztZQUNuQixPQUFPLEtBQUssT0FBTyxDQUFDLENBQUM7U0FDdEIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3hGLElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDZCxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbEIsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3hCLElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDcEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxrQkFBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBUyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3RCxPQUFPLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRTtZQUNwQyxJQUFJLENBQUMsQ0FBUyxFQUFFLEVBQTBEO2dCQUN4RSxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN4QixDQUFDO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxNQUFNLEdBQUcsTUFBTSxrQkFBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBUyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbW9ja2VyeSBmcm9tICdtb2NrZXJ5JztcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi4vbGliL2NvbW1hbmQtYXBpJztcbmltcG9ydCB7IHJlYWxIYW5kbGVyIH0gZnJvbSAnLi4vbGliL2NvbW1hbmRzL2RvY3MnO1xuXG5jb25zdCBhcmd2ID0ge1xuICBicm93c2VyOiAnZWNobyAldScsXG4gIGNvbW1hbmRIYW5kbGVyOiB1bmRlZmluZWQgYXMgKENvbW1hbmRIYW5kbGVyIHwgdW5kZWZpbmVkKSxcbn07XG5cbmRlc2NyaWJlKCdgY2RrIGRvY3NgJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKGRvbmUgPT4ge1xuICAgIG1vY2tlcnkucmVnaXN0ZXJNb2NrKCcuLi8uLi9saWIvbG9nZ2luZycsIHtcbiAgICAgIGRlYnVnKCkgeyByZXR1cm47IH0sXG4gICAgICBlcnJvcigpIHsgcmV0dXJuOyB9LFxuICAgICAgcHJpbnQoKSB7IHJldHVybjsgfSxcbiAgICAgIHdhcm5pbmcoKSB7IHJldHVybjsgfSxcbiAgICB9KTtcbiAgICBtb2NrZXJ5LmVuYWJsZSh7IHVzZUNsZWFuQ2FjaGU6IHRydWUsIHdhcm5PblJlcGxhY2U6IHRydWUsIHdhcm5PblVucmVnaXN0ZXJlZDogZmFsc2UgfSk7XG4gICAgZG9uZSgpO1xuICB9KTtcblxuICBhZnRlckFsbChkb25lID0+IHtcbiAgICBtb2NrZXJ5LmRpc2FibGUoKTtcbiAgICBtb2NrZXJ5LmRlcmVnaXN0ZXJBbGwoKTtcbiAgICBkb25lKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2V4aXRzIHdpdGggMCB3aGVuIGV2ZXJ5dGhpbmcgaXMgT0snLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVhbEhhbmRsZXIoeyBhcmdzOiBhcmd2IH0gYXMgYW55KTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlKDApO1xuICB9KTtcblxuICB0ZXN0KCdleGl0cyB3aXRoIDAgd2hlbiBvcGVuaW5nIHRoZSBicm93c2VyIGZhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tlcnkucmVnaXN0ZXJNb2NrKCdjaGlsZF9wcm9jZXNzJywge1xuICAgICAgZXhlYyhfOiBzdHJpbmcsIGNiOiAoZXJyOiBFcnJvciwgc3Rkb3V0Pzogc3RyaW5nLCBzdGRlcnI/OiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICAgICAgY2IobmV3IEVycm9yKCdURVNUJykpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZWFsSGFuZGxlcih7IGFyZ3M6IGFyZ3YgfSBhcyBhbnkpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoMCk7XG4gIH0pO1xufSk7XG4iXX0=