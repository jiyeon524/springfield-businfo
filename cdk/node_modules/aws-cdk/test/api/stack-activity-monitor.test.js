"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const stack_activity_monitor_1 = require("../../lib/api/util/cloudformation/stack-activity-monitor");
const console_listener_1 = require("./console-listener");
let TIMESTAMP;
let HUMAN_TIME;
beforeAll(() => {
    TIMESTAMP = new Date().getTime();
    HUMAN_TIME = new Date(TIMESTAMP).toLocaleTimeString();
});
test('prints 0/4 progress report, when addActivity is called with an "IN_PROGRESS" ResourceStatus', () => {
    const historyActivityPrinter = new stack_activity_monitor_1.HistoryActivityPrinter({
        resourceTypeColumnWidth: 23,
        resourcesTotal: 3,
        stream: process.stderr,
    });
    const output = console_listener_1.stderr.inspectSync(() => {
        historyActivityPrinter.addActivity({
            event: {
                LogicalResourceId: 'stack1',
                ResourceStatus: 'IN_PROGRESS',
                Timestamp: new Date(TIMESTAMP),
                ResourceType: 'AWS::CloudFormation::Stack',
                StackId: '',
                EventId: '',
                StackName: 'stack-name',
            },
        });
    });
    expect(output[0].trim()).toStrictEqual(`stack-name | 0/4 | ${HUMAN_TIME} | ${chalk_1.reset('IN_PROGRESS         ')} | AWS::CloudFormation::Stack | ${chalk_1.reset(chalk_1.bold('stack1'))}`);
});
test('prints 1/4 progress report, when addActivity is called with an "UPDATE_COMPLETE" ResourceStatus', () => {
    const historyActivityPrinter = new stack_activity_monitor_1.HistoryActivityPrinter({
        resourceTypeColumnWidth: 23,
        resourcesTotal: 3,
        stream: process.stderr,
    });
    const output = console_listener_1.stderr.inspectSync(() => {
        historyActivityPrinter.addActivity({
            event: {
                LogicalResourceId: 'stack1',
                ResourceStatus: 'UPDATE_COMPLETE',
                Timestamp: new Date(TIMESTAMP),
                ResourceType: 'AWS::CloudFormation::Stack',
                StackId: '',
                EventId: '',
                StackName: 'stack-name',
            },
        });
    });
    expect(output[0].trim()).toStrictEqual(`stack-name | 1/4 | ${HUMAN_TIME} | ${chalk_1.green('UPDATE_COMPLETE     ')} | AWS::CloudFormation::Stack | ${chalk_1.green(chalk_1.bold('stack1'))}`);
});
test('prints 1/4 progress report, when addActivity is called with an "UPDATE_COMPLETE_CLEAN_IN_PROGRESS" ResourceStatus', () => {
    const historyActivityPrinter = new stack_activity_monitor_1.HistoryActivityPrinter({
        resourceTypeColumnWidth: 23,
        resourcesTotal: 3,
        stream: process.stderr,
    });
    const output = console_listener_1.stderr.inspectSync(() => {
        historyActivityPrinter.addActivity({
            event: {
                LogicalResourceId: 'stack1',
                ResourceStatus: 'UPDATE_COMPLETE_CLEANUP_IN_PROGRESS',
                Timestamp: new Date(TIMESTAMP),
                ResourceType: 'AWS::CloudFormation::Stack',
                StackId: '',
                EventId: '',
                StackName: 'stack-name',
            },
        });
    });
    expect(output[0].trim()).toStrictEqual(`stack-name | 1/4 | ${HUMAN_TIME} | ${chalk_1.green('UPDATE_COMPLETE_CLEA')} | AWS::CloudFormation::Stack | ${chalk_1.green(chalk_1.bold('stack1'))}`);
});
test('prints 1/4 progress report, when addActivity is called with an "ROLLBACK_COMPLETE_CLEAN_IN_PROGRESS" ResourceStatus', () => {
    const historyActivityPrinter = new stack_activity_monitor_1.HistoryActivityPrinter({
        resourceTypeColumnWidth: 23,
        resourcesTotal: 3,
        stream: process.stderr,
    });
    const output = console_listener_1.stderr.inspectSync(() => {
        historyActivityPrinter.addActivity({
            event: {
                LogicalResourceId: 'stack1',
                ResourceStatus: 'ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS',
                Timestamp: new Date(TIMESTAMP),
                ResourceType: 'AWS::CloudFormation::Stack',
                StackId: '',
                EventId: '',
                StackName: 'stack-name',
            },
        });
    });
    expect(output[0].trim()).toStrictEqual(`stack-name | 1/4 | ${HUMAN_TIME} | ${chalk_1.yellow('ROLLBACK_COMPLETE_CL')} | AWS::CloudFormation::Stack | ${chalk_1.yellow(chalk_1.bold('stack1'))}`);
});
test('prints 0/4 progress report, when addActivity is called with an "UPDATE_FAILED" ResourceStatus', () => {
    const historyActivityPrinter = new stack_activity_monitor_1.HistoryActivityPrinter({
        resourceTypeColumnWidth: 23,
        resourcesTotal: 3,
        stream: process.stderr,
    });
    const output = console_listener_1.stderr.inspectSync(() => {
        historyActivityPrinter.addActivity({
            event: {
                LogicalResourceId: 'stack1',
                ResourceStatus: 'UPDATE_FAILED',
                Timestamp: new Date(TIMESTAMP),
                ResourceType: 'AWS::CloudFormation::Stack',
                StackId: '',
                EventId: '',
                StackName: 'stack-name',
            },
        });
    });
    expect(output[0].trim()).toStrictEqual(`stack-name | 0/4 | ${HUMAN_TIME} | ${chalk_1.red('UPDATE_FAILED       ')} | AWS::CloudFormation::Stack | ${chalk_1.red(chalk_1.bold('stack1'))}`);
});
test('does not print "Failed Resources:" list, when all deployments are successful', () => {
    const historyActivityPrinter = new stack_activity_monitor_1.HistoryActivityPrinter({
        resourceTypeColumnWidth: 23,
        resourcesTotal: 1,
        stream: process.stderr,
    });
    const output = console_listener_1.stderr.inspectSync(() => {
        historyActivityPrinter.addActivity({
            event: {
                LogicalResourceId: 'stack1',
                ResourceStatus: 'IN_PROGRESS',
                Timestamp: new Date(TIMESTAMP),
                ResourceType: 'AWS::CloudFormation::Stack',
                StackId: '',
                EventId: '',
                StackName: 'stack-name',
            },
        });
        historyActivityPrinter.addActivity({
            event: {
                LogicalResourceId: 'stack1',
                ResourceStatus: 'UPDATE_COMPLETE',
                Timestamp: new Date(TIMESTAMP),
                ResourceType: 'AWS::CloudFormation::Stack',
                StackId: '',
                EventId: '',
                StackName: 'stack-name',
            },
        });
        historyActivityPrinter.addActivity({
            event: {
                LogicalResourceId: 'stack2',
                ResourceStatus: 'UPDATE_COMPLETE',
                Timestamp: new Date(TIMESTAMP),
                ResourceType: 'AWS::CloudFormation::Stack',
                StackId: '',
                EventId: '',
                StackName: 'stack-name',
            },
        });
        historyActivityPrinter.stop();
    });
    expect(output.length).toStrictEqual(3);
    expect(output[0].trim()).toStrictEqual(`stack-name | 0/2 | ${HUMAN_TIME} | ${chalk_1.reset('IN_PROGRESS         ')} | AWS::CloudFormation::Stack | ${chalk_1.reset(chalk_1.bold('stack1'))}`);
    expect(output[1].trim()).toStrictEqual(`stack-name | 1/2 | ${HUMAN_TIME} | ${chalk_1.green('UPDATE_COMPLETE     ')} | AWS::CloudFormation::Stack | ${chalk_1.green(chalk_1.bold('stack1'))}`);
    expect(output[2].trim()).toStrictEqual(`stack-name | 2/2 | ${HUMAN_TIME} | ${chalk_1.green('UPDATE_COMPLETE     ')} | AWS::CloudFormation::Stack | ${chalk_1.green(chalk_1.bold('stack2'))}`);
});
test('prints "Failed Resources:" list, when at least one deployment fails', () => {
    const historyActivityPrinter = new stack_activity_monitor_1.HistoryActivityPrinter({
        resourceTypeColumnWidth: 23,
        resourcesTotal: 1,
        stream: process.stderr,
    });
    const output = console_listener_1.stderr.inspectSync(() => {
        historyActivityPrinter.addActivity({
            event: {
                LogicalResourceId: 'stack1',
                ResourceStatus: 'IN_PROGRESS',
                Timestamp: new Date(TIMESTAMP),
                ResourceType: 'AWS::CloudFormation::Stack',
                StackId: '',
                EventId: '',
                StackName: 'stack-name',
            },
        });
        historyActivityPrinter.addActivity({
            event: {
                LogicalResourceId: 'stack1',
                ResourceStatus: 'UPDATE_FAILED',
                Timestamp: new Date(TIMESTAMP),
                ResourceType: 'AWS::CloudFormation::Stack',
                StackId: '',
                EventId: '',
                StackName: 'stack-name',
            },
        });
        historyActivityPrinter.stop();
    });
    expect(output.length).toStrictEqual(4);
    expect(output[0].trim()).toStrictEqual(`stack-name | 0/2 | ${HUMAN_TIME} | ${chalk_1.reset('IN_PROGRESS         ')} | AWS::CloudFormation::Stack | ${chalk_1.reset(chalk_1.bold('stack1'))}`);
    expect(output[1].trim()).toStrictEqual(`stack-name | 0/2 | ${HUMAN_TIME} | ${chalk_1.red('UPDATE_FAILED       ')} | AWS::CloudFormation::Stack | ${chalk_1.red(chalk_1.bold('stack1'))}`);
    expect(output[2].trim()).toStrictEqual('Failed resources:');
    expect(output[3].trim()).toStrictEqual(`stack-name | ${HUMAN_TIME} | ${chalk_1.red('UPDATE_FAILED       ')} | AWS::CloudFormation::Stack | ${chalk_1.red(chalk_1.bold('stack1'))}`);
});
//# sourceMappingURL=data:application/json;base64,