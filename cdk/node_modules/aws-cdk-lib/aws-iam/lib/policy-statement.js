"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.Effect=exports.PolicyStatement=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),cdk=require("../../core"),group_1=require("./group"),principals_1=require("./principals"),util_1=require("./util"),ensureArrayOrUndefined=field=>{if(field!==void 0){if(typeof field!="string"&&!Array.isArray(field))throw new Error("Fields must be either a string or an array of strings");if(Array.isArray(field)&&!!field.find(f=>typeof f!="string"))throw new Error("Fields must be either a string or an array of strings");return Array.isArray(field)?field:[field]}};class PolicyStatement{constructor(props={}){this.action=new Array,this.notAction=new Array,this.principal={},this.notPrincipal={},this.resource=new Array,this.notResource=new Array,this.condition={},jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_PolicyStatementProps(props);for(const action of[...props.actions||[],...props.notActions||[]])if(!/^(\*|[a-zA-Z0-9-]+:[a-zA-Z0-9*]+)$/.test(action)&&!cdk.Token.isUnresolved(action))throw new Error(`Action '${action}' is invalid. An action string consists of a service namespace, a colon, and the name of an action. Action names can include wildcards.`);this.sid=props.sid,this.effect=props.effect||Effect.ALLOW,this.addActions(...props.actions||[]),this.addNotActions(...props.notActions||[]),this.addPrincipals(...props.principals||[]),this.addNotPrincipals(...props.notPrincipals||[]),this.addResources(...props.resources||[]),this.addNotResources(...props.notResources||[]),props.conditions!==void 0&&this.addConditions(props.conditions)}static fromJson(obj){const ret=new PolicyStatement({sid:obj.Sid,actions:ensureArrayOrUndefined(obj.Action),resources:ensureArrayOrUndefined(obj.Resource),conditions:obj.Condition,effect:obj.Effect,notActions:ensureArrayOrUndefined(obj.NotAction),notResources:ensureArrayOrUndefined(obj.NotResource),principals:obj.Principal?[new JsonPrincipal(obj.Principal)]:void 0,notPrincipals:obj.NotPrincipal?[new JsonPrincipal(obj.NotPrincipal)]:void 0}),errors=ret.validateForAnyPolicy();if(errors.length>0)throw new Error("Incorrect Policy Statement: "+errors.join(`
`));return ret}addActions(...actions){if(actions.length>0&&this.notAction.length>0)throw new Error("Cannot add 'Actions' to policy statement if 'NotActions' have been added");this.action.push(...actions)}addNotActions(...notActions){if(notActions.length>0&&this.action.length>0)throw new Error("Cannot add 'NotActions' to policy statement if 'Actions' have been added");this.notAction.push(...notActions)}get hasPrincipal(){return Object.keys(this.principal).length>0||Object.keys(this.notPrincipal).length>0}addPrincipals(...principals){if(jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_IPrincipal(principals),Object.keys(principals).length>0&&Object.keys(this.notPrincipal).length>0)throw new Error("Cannot add 'Principals' to policy statement if 'NotPrincipals' have been added");for(const principal of principals){this.validatePolicyPrincipal(principal);const fragment=principal.policyFragment;util_1.mergePrincipal(this.principal,fragment.principalJson),this.addPrincipalConditions(fragment.conditions)}}addNotPrincipals(...notPrincipals){if(jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_IPrincipal(notPrincipals),Object.keys(notPrincipals).length>0&&Object.keys(this.principal).length>0)throw new Error("Cannot add 'NotPrincipals' to policy statement if 'Principals' have been added");for(const notPrincipal of notPrincipals){this.validatePolicyPrincipal(notPrincipal);const fragment=notPrincipal.policyFragment;util_1.mergePrincipal(this.notPrincipal,fragment.principalJson),this.addPrincipalConditions(fragment.conditions)}}validatePolicyPrincipal(principal){if(principal instanceof group_1.Group)throw new Error("Cannot use an IAM Group as the 'Principal' or 'NotPrincipal' in an IAM Policy")}addAwsAccountPrincipal(accountId){this.addPrincipals(new principals_1.AccountPrincipal(accountId))}addArnPrincipal(arn){this.addPrincipals(new principals_1.ArnPrincipal(arn))}addServicePrincipal(service,opts){jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_ServicePrincipalOpts(opts),this.addPrincipals(new principals_1.ServicePrincipal(service,opts))}addFederatedPrincipal(federated,conditions){this.addPrincipals(new principals_1.FederatedPrincipal(federated,conditions))}addAccountRootPrincipal(){this.addPrincipals(new principals_1.AccountRootPrincipal)}addCanonicalUserPrincipal(canonicalUserId){this.addPrincipals(new principals_1.CanonicalUserPrincipal(canonicalUserId))}addAnyPrincipal(){this.addPrincipals(new principals_1.AnyPrincipal)}addResources(...arns){if(arns.length>0&&this.notResource.length>0)throw new Error("Cannot add 'Resources' to policy statement if 'NotResources' have been added");this.resource.push(...arns)}addNotResources(...arns){if(arns.length>0&&this.resource.length>0)throw new Error("Cannot add 'NotResources' to policy statement if 'Resources' have been added");this.notResource.push(...arns)}addAllResources(){this.addResources("*")}get hasResource(){return this.resource&&this.resource.length>0}addCondition(key,value){const existingValue=this.condition[key];this.condition[key]=existingValue?{...existingValue,...value}:value}addConditions(conditions){Object.keys(conditions).map(key=>{this.addCondition(key,conditions[key])})}addAccountCondition(accountId){this.addCondition("StringEquals",{"sts:ExternalId":accountId})}toStatementJson(){return noUndef({Action:_norm(this.action,{unique:!0}),NotAction:_norm(this.notAction,{unique:!0}),Condition:_norm(this.condition),Effect:_norm(this.effect),Principal:_normPrincipal(this.principal),NotPrincipal:_normPrincipal(this.notPrincipal),Resource:_norm(this.resource,{unique:!0}),NotResource:_norm(this.notResource,{unique:!0}),Sid:_norm(this.sid)});function _norm(values,{unique}={unique:!1}){if(typeof values!="undefined"){if(cdk.Token.isUnresolved(values))return values;if(Array.isArray(values))return!values||values.length===0?void 0:values.length===1?values[0]:unique?[...new Set(values)]:values;if(!(typeof values=="object"&&Object.keys(values).length===0))return values}}function _normPrincipal(principal){const keys=Object.keys(principal);if(keys.length===0)return;if(util_1.LITERAL_STRING_KEY in principal)return principal[util_1.LITERAL_STRING_KEY][0];const result={};for(const key of keys){const normVal=_norm(principal[key]);normVal&&(result[key]=normVal)}return result}}toString(){return cdk.Token.asString(this,{displayHint:"PolicyStatement"})}toJSON(){return this.toStatementJson()}addPrincipalConditions(conditions){const theseConditions=JSON.stringify(conditions);if(this.principalConditionsJson===void 0)this.principalConditionsJson=theseConditions;else if(this.principalConditionsJson!==theseConditions)throw new Error(`All principals in a PolicyStatement must have the same Conditions (got '${this.principalConditionsJson}' and '${theseConditions}'). Use multiple statements instead.`);this.addConditions(conditions)}validateForAnyPolicy(){const errors=new Array;return this.action.length===0&&this.notAction.length===0&&errors.push("A PolicyStatement must specify at least one 'action' or 'notAction'."),errors}validateForResourcePolicy(){const errors=this.validateForAnyPolicy();return Object.keys(this.principal).length===0&&Object.keys(this.notPrincipal).length===0&&errors.push("A PolicyStatement used in a resource-based policy must specify at least one IAM principal."),errors}validateForIdentityPolicy(){const errors=this.validateForAnyPolicy();return(Object.keys(this.principal).length>0||Object.keys(this.notPrincipal).length>0)&&errors.push("A PolicyStatement used in an identity-based policy cannot specify any IAM principals."),Object.keys(this.resource).length===0&&Object.keys(this.notResource).length===0&&errors.push("A PolicyStatement used in an identity-based policy must specify at least one resource."),errors}}exports.PolicyStatement=PolicyStatement,_a=JSII_RTTI_SYMBOL_1,PolicyStatement[_a]={fqn:"aws-cdk-lib.aws_iam.PolicyStatement",version:"2.17.0"};var Effect;(function(Effect2){Effect2.ALLOW="Allow",Effect2.DENY="Deny"})(Effect=exports.Effect||(exports.Effect={}));function noUndef(x){const ret={};for(const[key,value]of Object.entries(x))value!==void 0&&(ret[key]=value);return ret}class JsonPrincipal extends principals_1.PrincipalBase{constructor(json={}){super();if(typeof json=="string"&&(json={[util_1.LITERAL_STRING_KEY]:[json]}),typeof json!="object")throw new Error(`JSON IAM principal should be an object, got ${JSON.stringify(json)}`);this.policyFragment={principalJson:json,conditions:{}}}}
//# sourceMappingURL=policy-statement.js.map
