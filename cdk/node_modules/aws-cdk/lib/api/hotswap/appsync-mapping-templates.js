"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHotswappableAppSyncChange = void 0;
const common_1 = require("./common");
async function isHotswappableAppSyncChange(logicalId, change, evaluateCfnTemplate) {
    const isResolver = change.newValue.Type === 'AWS::AppSync::Resolver';
    const isFunction = change.newValue.Type === 'AWS::AppSync::FunctionConfiguration';
    if (!isResolver && !isFunction) {
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    for (const updatedPropName in change.propertyUpdates) {
        if (updatedPropName !== 'RequestMappingTemplate' && updatedPropName !== 'ResponseMappingTemplate') {
            return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
        }
    }
    const resourceProperties = change.newValue.Properties;
    if (isResolver && (resourceProperties === null || resourceProperties === void 0 ? void 0 : resourceProperties.Kind) === 'PIPELINE') {
        // Pipeline resolvers can't be hotswapped as they reference
        // the FunctionId of the underlying functions, which can't be resolved.
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    const resourcePhysicalName = await evaluateCfnTemplate.establishResourcePhysicalName(logicalId, isFunction ? resourceProperties === null || resourceProperties === void 0 ? void 0 : resourceProperties.Name : undefined);
    if (!resourcePhysicalName) {
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    const evaluatedResourceProperties = await evaluateCfnTemplate.evaluateCfnExpression(resourceProperties);
    const sdkCompatibleResourceProperties = common_1.transformObjectKeys(evaluatedResourceProperties, common_1.lowerCaseFirstCharacter);
    if (isResolver) {
        // Resolver physical name is the ARN in the format:
        // arn:aws:appsync:us-east-1:111111111111:apis/<apiId>/types/<type>/resolvers/<field>.
        // We'll use `<type>.<field>` as the resolver name.
        const arnParts = resourcePhysicalName.split('/');
        const resolverName = `${arnParts[3]}.${arnParts[5]}`;
        return new ResolverHotswapOperation(resolverName, sdkCompatibleResourceProperties);
    }
    else {
        return new FunctionHotswapOperation(resourcePhysicalName, sdkCompatibleResourceProperties);
    }
}
exports.isHotswappableAppSyncChange = isHotswappableAppSyncChange;
class ResolverHotswapOperation {
    constructor(resolverName, updateResolverRequest) {
        this.updateResolverRequest = updateResolverRequest;
        this.service = 'appsync';
        this.resourceNames = [`AppSync resolver '${resolverName}'`];
    }
    async apply(sdk) {
        return sdk.appsync().updateResolver(this.updateResolverRequest).promise();
    }
}
class FunctionHotswapOperation {
    constructor(functionName, updateFunctionRequest) {
        this.functionName = functionName;
        this.updateFunctionRequest = updateFunctionRequest;
        this.service = 'appsync';
        this.resourceNames = [`AppSync function '${functionName}'`];
    }
    async apply(sdk) {
        var _a;
        const { functions } = await sdk.appsync().listFunctions({ apiId: this.updateFunctionRequest.apiId }).promise();
        const { functionId } = (_a = functions === null || functions === void 0 ? void 0 : functions.find(fn => fn.name === this.functionName)) !== null && _a !== void 0 ? _a : {};
        const request = {
            ...this.updateFunctionRequest,
            functionId: functionId,
        };
        return sdk.appsync().updateFunction(request).promise();
    }
}
//# sourceMappingURL=data:application/json;base64,