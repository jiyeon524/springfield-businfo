"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHotswappableS3BucketDeploymentChange = exports.REQUIRED_BY_CFN = void 0;
const common_1 = require("./common");
/**
 * This means that the value is required to exist by CloudFormation's API (or our S3 Bucket Deployment Lambda)
 * but the actual value specified is irrelevant
 */
exports.REQUIRED_BY_CFN = 'required-to-be-present-by-cfn';
async function isHotswappableS3BucketDeploymentChange(logicalId, change, evaluateCfnTemplate) {
    var _a;
    // In old-style synthesis, the policy used by the lambda to copy assets Ref's the assets directly,
    // meaning that the changes made to the Policy are artifacts that can be safely ignored
    if (change.newValue.Type === 'AWS::IAM::Policy') {
        return changeIsForS3DeployCustomResourcePolicy(logicalId, change, evaluateCfnTemplate);
    }
    if (change.newValue.Type !== 'Custom::CDKBucketDeployment') {
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    // note that this gives the ARN of the lambda, not the name. This is fine though, the invoke() sdk call will take either
    const functionName = await evaluateCfnTemplate.evaluateCfnExpression((_a = change.newValue.Properties) === null || _a === void 0 ? void 0 : _a.ServiceToken);
    if (!functionName) {
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    const customResourceProperties = await evaluateCfnTemplate.evaluateCfnExpression({
        ...change.newValue.Properties,
        ServiceToken: undefined,
    });
    return new S3BucketDeploymentHotswapOperation(functionName, customResourceProperties);
}
exports.isHotswappableS3BucketDeploymentChange = isHotswappableS3BucketDeploymentChange;
class S3BucketDeploymentHotswapOperation {
    constructor(functionName, customResourceProperties) {
        this.functionName = functionName;
        this.customResourceProperties = customResourceProperties;
        this.service = 'custom-s3-deployment';
        this.resourceNames = [`Contents of S3 Bucket '${this.customResourceProperties.DestinationBucketName}'`];
    }
    async apply(sdk) {
        return sdk.lambda().invoke({
            FunctionName: this.functionName,
            // Lambda refuses to take a direct JSON object and requires it to be stringify()'d
            Payload: JSON.stringify({
                RequestType: 'Update',
                ResponseURL: exports.REQUIRED_BY_CFN,
                PhysicalResourceId: exports.REQUIRED_BY_CFN,
                StackId: exports.REQUIRED_BY_CFN,
                RequestId: exports.REQUIRED_BY_CFN,
                LogicalResourceId: exports.REQUIRED_BY_CFN,
                ResourceProperties: stringifyObject(this.customResourceProperties),
            }),
        }).promise();
    }
}
async function changeIsForS3DeployCustomResourcePolicy(iamPolicyLogicalId, change, evaluateCfnTemplate) {
    var _a;
    const roles = (_a = change.newValue.Properties) === null || _a === void 0 ? void 0 : _a.Roles;
    if (!roles) {
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    for (const role of roles) {
        const roleLogicalId = await evaluateCfnTemplate.findLogicalIdForPhysicalName(await evaluateCfnTemplate.evaluateCfnExpression(role));
        if (!roleLogicalId) {
            return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
        }
        const roleRefs = evaluateCfnTemplate.findReferencesTo(roleLogicalId);
        for (const roleRef of roleRefs) {
            if (roleRef.Type === 'AWS::Lambda::Function') {
                const lambdaRefs = evaluateCfnTemplate.findReferencesTo(roleRef.LogicalId);
                for (const lambdaRef of lambdaRefs) {
                    // If S3Deployment -> Lambda -> Role and IAM::Policy -> Role, then this IAM::Policy change is an
                    // artifact of old-style synthesis
                    if (lambdaRef.Type !== 'Custom::CDKBucketDeployment') {
                        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
                    }
                }
            }
            else if (roleRef.Type === 'AWS::IAM::Policy') {
                if (roleRef.LogicalId !== iamPolicyLogicalId) {
                    return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
                }
            }
            else {
                return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
            }
        }
    }
    return common_1.ChangeHotswapImpact.IRRELEVANT;
}
function stringifyObject(obj) {
    if (obj == null) {
        return obj;
    }
    if (Array.isArray(obj)) {
        return obj.map(stringifyObject);
    }
    if (typeof obj !== 'object') {
        return obj.toString();
    }
    const ret = {};
    for (const [k, v] of Object.entries(obj)) {
        ret[k] = stringifyObject(v);
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,