"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoticeFilter = exports.CachedDataSource = exports.WebsiteNoticeDataSource = exports.formatNotices = exports.filterNotices = exports.generateMessage = exports.displayNotices = exports.refreshNotices = void 0;
const https = require("https");
const path = require("path");
const fs = require("fs-extra");
const semver = require("semver");
const logging_1 = require("./logging");
const util_1 = require("./util");
const directories_1 = require("./util/directories");
const version_1 = require("./version");
const CACHE_FILE_PATH = path.join(directories_1.cdkCacheDir(), 'notices.json');
async function refreshNotices() {
    const dataSource = dataSourceReference(false);
    return dataSource.fetch();
}
exports.refreshNotices = refreshNotices;
async function displayNotices(props) {
    var _a;
    const dataSource = dataSourceReference((_a = props.ignoreCache) !== null && _a !== void 0 ? _a : false);
    logging_1.print(await generateMessage(dataSource, props));
    return 0;
}
exports.displayNotices = displayNotices;
async function generateMessage(dataSource, props) {
    const data = await dataSource.fetch();
    const filteredNotices = filterNotices(data, {
        outdir: props.outdir,
        acknowledgedIssueNumbers: new Set(props.acknowledgedIssueNumbers),
    });
    if (filteredNotices.length > 0) {
        const individualMessages = formatNotices(filteredNotices);
        return finalMessage(individualMessages, filteredNotices[0].issueNumber);
    }
    return '';
}
exports.generateMessage = generateMessage;
function dataSourceReference(ignoreCache) {
    return new CachedDataSource(CACHE_FILE_PATH, new WebsiteNoticeDataSource(), ignoreCache);
}
function finalMessage(individualMessages, exampleNumber) {
    return [
        '\nNOTICES',
        ...individualMessages,
        `If you donâ€™t want to see a notice anymore, use "cdk acknowledge <id>". For example, "cdk acknowledge ${exampleNumber}".`,
    ].join('\n\n');
}
function filterNotices(data, options) {
    var _a, _b, _c;
    const filter = new NoticeFilter({
        cliVersion: (_a = options.cliVersion) !== null && _a !== void 0 ? _a : version_1.versionNumber(),
        acknowledgedIssueNumbers: (_b = options.acknowledgedIssueNumbers) !== null && _b !== void 0 ? _b : new Set(),
        tree: loadTree((_c = options.outdir) !== null && _c !== void 0 ? _c : 'cdk.out').tree,
    });
    return data.filter(notice => filter.apply(notice));
}
exports.filterNotices = filterNotices;
function formatNotices(data) {
    return data.map(formatNotice);
}
exports.formatNotices = formatNotices;
class WebsiteNoticeDataSource {
    fetch() {
        const timeout = 3000;
        return new Promise((resolve) => {
            setTimeout(() => resolve([]), timeout);
            try {
                const req = https.get('https://cli.cdk.dev-tools.aws.dev/notices.json', { timeout }, res => {
                    if (res.statusCode === 200) {
                        res.setEncoding('utf8');
                        let rawData = '';
                        res.on('data', (chunk) => {
                            rawData += chunk;
                        });
                        res.on('end', () => {
                            try {
                                const data = JSON.parse(rawData).notices;
                                resolve(data !== null && data !== void 0 ? data : []);
                            }
                            catch (e) {
                                logging_1.debug(`Failed to parse notices: ${e}`);
                                resolve([]);
                            }
                        });
                        res.on('error', e => {
                            logging_1.debug(`Failed to fetch notices: ${e}`);
                            resolve([]);
                        });
                    }
                    else {
                        logging_1.debug(`Failed to fetch notices. Status code: ${res.statusCode}`);
                        resolve([]);
                    }
                });
                req.on('error', e => {
                    logging_1.debug(`Error on request: ${e}`);
                    resolve([]);
                });
                req.on('timeout', _ => resolve([]));
            }
            catch (e) {
                logging_1.debug(`HTTPS 'get' call threw an error: ${e}`);
                resolve([]);
            }
        });
    }
}
exports.WebsiteNoticeDataSource = WebsiteNoticeDataSource;
const TIME_TO_LIVE = 60 * 60 * 1000; // 1 hour
class CachedDataSource {
    constructor(fileName, dataSource, skipCache) {
        this.fileName = fileName;
        this.dataSource = dataSource;
        this.skipCache = skipCache;
    }
    async fetch() {
        var _a;
        const cachedData = await this.load();
        const data = cachedData.notices;
        const expiration = (_a = cachedData.expiration) !== null && _a !== void 0 ? _a : 0;
        if (Date.now() > expiration || this.skipCache) {
            const freshData = {
                expiration: Date.now() + TIME_TO_LIVE,
                notices: await this.dataSource.fetch(),
            };
            await this.save(freshData);
            return freshData.notices;
        }
        else {
            return data;
        }
    }
    async load() {
        const defaultValue = {
            expiration: 0,
            notices: [],
        };
        try {
            return fs.existsSync(this.fileName)
                ? await fs.readJSON(this.fileName)
                : defaultValue;
        }
        catch (e) {
            logging_1.debug(`Failed to load notices from cache: ${e}`);
            return defaultValue;
        }
    }
    async save(cached) {
        try {
            await fs.writeJSON(this.fileName, cached);
        }
        catch (e) {
            logging_1.debug(`Failed to store notices in the cache: ${e}`);
        }
    }
}
exports.CachedDataSource = CachedDataSource;
class NoticeFilter {
    constructor(props) {
        this.props = props;
        this.acknowledgedIssueNumbers = props.acknowledgedIssueNumbers;
    }
    /**
     * Returns true iff we should show this notice.
     */
    apply(notice) {
        if (this.acknowledgedIssueNumbers.has(notice.issueNumber)) {
            return false;
        }
        return this.applyVersion(notice, 'cli', this.props.cliVersion) ||
            match(resolveAliases(notice.components), this.props.tree);
    }
    /**
     * Returns true iff we should show the notice.
     */
    applyVersion(notice, name, compareToVersion) {
        if (compareToVersion === undefined) {
            return false;
        }
        const affectedComponent = notice.components.find(component => component.name === name);
        const affectedRange = affectedComponent === null || affectedComponent === void 0 ? void 0 : affectedComponent.version;
        return affectedRange != null && semver.satisfies(compareToVersion, affectedRange);
    }
}
exports.NoticeFilter = NoticeFilter;
/**
 * Some component names are aliases to actual component names. For example "framework"
 * is an alias for either the core library (v1) or the whole CDK library (v2).
 *
 * This function converts all aliases to their actual counterpart names, to be used to
 * match against the construct tree.
 *
 * @param components a list of components. Components whose name is an alias will be
 * transformed and all others will be left intact.
 */
function resolveAliases(components) {
    return util_1.flatMap(components, component => {
        if (component.name === 'framework') {
            return [{
                    name: '@aws-cdk/core.',
                    version: component.version,
                }, {
                    name: 'aws-cdk-lib.',
                    version: component.version,
                }];
        }
        else {
            return [component];
        }
    });
}
function formatNotice(notice) {
    const componentsValue = notice.components.map(c => `${c.name}: ${c.version}`).join(', ');
    return [
        `${notice.issueNumber}\t${notice.title}`,
        formatOverview(notice.overview),
        `\tAffected versions: ${componentsValue}`,
        `\tMore information at: https://github.com/aws/aws-cdk/issues/${notice.issueNumber}`,
    ].join('\n\n') + '\n';
}
function formatOverview(text) {
    const wrap = (s) => s.replace(/(?![^\n]{1,60}$)([^\n]{1,60})\s/g, '$1\n');
    const heading = 'Overview: ';
    const separator = `\n\t${' '.repeat(heading.length)}`;
    const content = wrap(text)
        .split('\n')
        .join(separator);
    return '\t' + heading + content;
}
/**
 * Whether any component in the tree matches any component in the query.
 * A match happens when:
 *
 * 1. The version of the node matches the version in the query, interpreted
 * as a semver range.
 *
 * 2. The name in the query is a prefix of the node name when the query ends in '.',
 * or the two names are exactly the same, otherwise.
 */
function match(query, tree) {
    return some(tree, node => {
        return query.some(component => {
            var _a, _b;
            return compareNames(component.name, (_a = node.constructInfo) === null || _a === void 0 ? void 0 : _a.fqn) &&
                compareVersions(component.version, (_b = node.constructInfo) === null || _b === void 0 ? void 0 : _b.version);
        });
    });
    function compareNames(pattern, target) {
        if (target == null) {
            return false;
        }
        return pattern.endsWith('.') ? target.startsWith(pattern) : pattern === target;
    }
    function compareVersions(pattern, target) {
        return semver.satisfies(target !== null && target !== void 0 ? target : '', pattern);
    }
}
function loadTree(outdir) {
    try {
        return fs.readJSONSync(path.join(outdir, 'tree.json'));
    }
    catch (e) {
        logging_1.debug(`Failed to get tree.json file: ${e}`);
        return {};
    }
}
function some(node, predicate) {
    return node != null && (predicate(node) || findInChildren());
    function findInChildren() {
        if (node.children == null) {
            return false;
        }
        for (const name in node.children) {
            if (some(node.children[name], predicate)) {
                return true;
            }
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,